import sqlite3
import os
from datetime import datetime

# 사용할 데이터베이스 파일명
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_NAME = os.path.join(BASE_DIR, 'parking.db')

# 주차장 최대 차량 수
MAX_PARKING = 100

def connect_db():
    """데이터베이스에 연결하고 커넥션 객체 반환"""
    return sqlite3.connect(DB_NAME)

def create_tables():
    """주차장 테이블과 출차 이력 테이블을 생성(없으면 생성)"""
    conn = connect_db()
    cursor = conn.cursor()
    # 현재 주차 차량 테이블
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS parking (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        car_number TEXT NOT NULL UNIQUE,
        car_type TEXT NOT NULL,
        entry_time DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    ''')
    # 출차 이력 테이블
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS parking_log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        car_number TEXT NOT NULL,
        car_type TEXT NOT NULL,
        entry_time DATETIME NOT NULL,
        exit_time DATETIME NOT NULL,
        fee INTEGER NOT NULL
    );
    ''')
    conn.commit()
    conn.close()

def get_current_parking_count():
    """현재 주차장에 입차된 차량 수 반환"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM parking;")
    n = cursor.fetchone()[0]
    conn.close()
    return n

def is_car_parked(car_number):
    """해당 차량번호가 이미 주차 중인지 확인"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT 1 FROM parking WHERE car_number = ?", (car_number,))
    result = cursor.fetchone()
    conn.close()
    return result is not None

def park_car(car_number, car_type):
    """
    차량 입차 함수
    - 만차 시 입차 불가
    - 이미 입차된 차량은 중복 입차 불가
    """
    if get_current_parking_count() >= MAX_PARKING:
        print("주차공간이 없습니다.")
        return
    if is_car_parked(car_number):
        print(f"차량 번호 {car_number}는 이미 입차되어 있습니다.")
        return
    conn = connect_db()
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO parking (car_number, car_type) VALUES (?, ?)", (car_number, car_type))
        conn.commit()
        print(f"차량 번호 {car_number} ({car_type}) 입차 완료.")
    except sqlite3.IntegrityError:
        print(f"차량 번호 {car_number}는 이미 입차되어 있습니다.")
    finally:
        conn.close()

def calculate_fee(entry_time_str, exit_time, car_type):
    """
    입차-출차 시간, 차량 종류로 요금 계산
    - 5분 이내 무료
    - 경차: 5분 초과 2000원, 35분(=5+30) 초과부터 30분당 1000원씩 추가
    - SUV/승용차: 5분 초과 3000원, 35분 초과부터 30분당 1000원씩 추가
    """
    # entry_time_str이 마이크로초까지 있을 수도 있으니 예외처리
    try:
        entry_time = datetime.strptime(entry_time_str, '%Y-%m-%d %H:%M:%S')
    except ValueError:
        entry_time = datetime.strptime(entry_time_str, '%Y-%m-%d %H:%M:%S.%f')
    duration = (exit_time - entry_time).total_seconds() // 60  # 분 단위

    if duration <= 5:
        return 0

    if car_type == '경차':
        fee = 2000
    else:  # SUV, 승용차
        fee = 3000
    extra_minutes = duration - 5
    # 35분(=5+30) 초과부터 30분 단위로 1000원씩 추가
    if extra_minutes > 30:
        extra_units = int((extra_minutes - 1) // 30)  # 35~65분: 1, 65~95분: 2, ...
        fee += extra_units * 1000
    return fee

def exit_car(car_number):
    """
    차량 출차 함수
    - 출차 시 요금 계산 및 parking_log에 기록
    - parking 테이블에서 해당 차량 삭제
    - 없는 차량 출차 시 안내
    """
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT car_type, entry_time FROM parking WHERE car_number = ?", (car_number,))
    result = cursor.fetchone()
    if not result:
        print(f"차량번호 {car_number}는 주차장에 없습니다.")
        conn.close()
        return
    car_type, entry_time_str = result
    exit_time = datetime.now()
    fee = calculate_fee(entry_time_str, exit_time, car_type)
    # 출차 기록 저장
    cursor.execute(
        "INSERT INTO parking_log (car_number, car_type, entry_time, exit_time, fee) VALUES (?, ?, ?, ?, ?)",
        (
            car_number,
            car_type,
            entry_time_str,
            exit_time.strftime('%Y-%m-%d %H:%M:%S'),
            fee
        )
    )
    # parking 테이블에서 차량 삭제
    cursor.execute("DELETE FROM parking WHERE car_number = ?", (car_number,))
    conn.commit()
    conn.close()
    print(f"차량번호:{car_number}, 요금은 {fee}원입니다.")

def show_current_parking():
    """현재 주차장에 입차된 모든 차량 정보 출력"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT id, car_number, car_type, entry_time FROM parking;")
    rows = cursor.fetchall()
    conn.close()
    if not rows:
        print("현재 주차장에 입차된 차량이 없습니다.")
    else:
        print("현재 주차 중인 차량 목록:")
        for row in rows:
            print(f"ID: {row[0]}, 차량번호: {row[1]}, 차량종류: {row[2]}, 입차시간: {row[3]}")

def show_parking_status():
    """현재 주차장 상태(n/100) 출력"""
    n = get_current_parking_count()
    print(f"현재 주차 상태: {n}/{MAX_PARKING}")

def show_parking_log():
    """모든 출차 이력 출력"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM parking_log;")
    rows = cursor.fetchall()
    conn.close()
    if not rows:
        print("출차 이력이 없습니다.")
    else:
        for row in rows:
            print(f"ID: {row[0]}, 차량번호: {row[1]}, 차량종류: {row[2]}, 입차시간: {row[3]}, 출차시간: {row[4]}, 요금: {row[5]}원")

# ------------------ 사용 예시 ------------------

if __name__ == "__main__":
    create_tables()  # 테이블 생성(최초 1회만)
    
    # 차량 입차 예시
    #park_car('1234', 'SUV')
    #park_car('5678', '경차')
    #park_car('9012', '승용차')
    #park_car('1234', 'SUV')  # 중복 입차 테스트
    
    # 현재 입차 차량 정보 출력
    #show_current_parking()

    # 주차장 상태 확인
    #show_parking_status()

    # 차량 출차 예시
    #exit_car('1234')
    #exit_car('9999')  # 없는 차량 출차 테스트

    # 주차장 상태 확인
    #show_parking_status()

    # 출차 이력 확인
    #show_parking_log()
    
    #DB삭제
    #os.remove('parking.db')를 사용하면 됩니다.
